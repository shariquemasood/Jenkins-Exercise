node {
   def mvnHome
   stage('Preparation') { // for display purposes
      // Get some code from a GitHub repository
      git 'https://github.com/shariquemasood/maven.git'
      // Get the Maven tool.
      // ** NOTE: This 'M3' Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool name: 'maven', type: 'maven'
      jvmHome = tool name: 'JDK', type: 'jdk'
      env.JAVA_HOME="${tool 'JDK'}"
      env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"

   }
   stage('Parameterized'){
       properties([parameters([choice(choices: ['master', 'feature'], description: 'branch as parameter', name: 'branch')])])
   }
   stage('Build') {
      // Run the maven build
      if (isUnix()) {
         sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package"
      } else {
         bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage('Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.jar'
   }
   stage('Build Docker Image'){
    sh 'sudo docker build -t vsharique/jenpipeline:latest .'
   }
   stage('Push Docker Image to DockerHub'){
    withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPwd')]) {
    // some block
    sh "sudo docker login -u vsharique -p ${dockerHubPwd}"
    }
    sh 'sudo docker push vsharique/jenpipeline:latest'
   }
   stage('Publish Over ssh'){
    sshPublisher(publishers: [sshPublisherDesc(configName: 'ubuntu-ec2', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sudo docker run -dt vsharique/jenpipeline', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
	}
 }
